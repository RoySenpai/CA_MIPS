Question 8:

MIPS Assembly code:
0x04000000 		addi $s0, $0, 0x1230
0x04000004 		add $t0, $k0, $s0
0x04000008 		sll $t2, $s0, 5
0x0400000C 		beq $t0, $t9, here
0x04000010 		there: j skip
0x04000014 		here: bne $t0, $t9, there
0x04000018 		skip: sw $a3, 8($t4)
0x0400001C 		lw $a2, 0($sp)
0x04000020 		sllv $s3, $s5, $s7
0x04000024 		sub $t6, $sp, $sp

Markdown:
here = 1
there = -2
skip = 0x04000018 -> 0000 0100 0000 0000 0000 0000 0001 1000 (32bit binary) -> 01 0000 0000 0000 0000 0000 0110 (26bit binary) -> 0x1000006 (26bit hex)


Breakdown:

R Types
Address			Command			op		rs		rt		rd		shamt		funct
0x04000004 		add $t0, $k0, $s0	000000		11010		10000		01000		00000		100000
0x04000008 		sll $t2, $s0, 5		000000		00000		10000		01010		00101		000000
0x04000020 		sllv $s3, $s5, $s7	000000		10111		10101		10011		00000		000100
0x04000024 		sub $t6, $sp, $sp	000000		11101		11101		01110		00000		100010

I Types
Address			Command			op		rs		rt		imm
0x04000000 		addi $s0, $0, 0x1230	001000		00000		10000		0001001000110000
0x0400000C 		beq $t0, $t9, 1		000100		11001		01000		0000000000000001
0x04000014 		bne $t0, $t9, -2	000101		11001		01000		1111111111111110
0x04000018 		sw $a3, 8($t4)		101011		01100		00111		0000000000001000
0x0400001C 		lw $a2, 0($sp)		100011		11101		00110		0000000000000000

J Types
Address			Command			op		addr
0x04000010 		j skip			000010		01000000000000000000000110


Raw Binary:
Address			Data
0x04000000 		0010 0000 0001 0000 0001 0010 0011 0000
0x04000004 		0000 0011 0101 0000 0100 0000 0010 0000
0x04000008 		0000 0000 0001 0000 0101 0001 0100 0000
0x0400000C 		0001 0011 0010 1000 0000 0000 0000 0001
0x04000010 		0000 1001 0000 0000 0000 0000 0000 0110
0x04000014 		0001 0111 0010 1000 1111 1111 1111 1110
0x04000018 		1010 1101 1000 0111 0000 0000 0000 1000
0x0400001C 		1000 1111 1010 0110 0000 0000 0000 0000
0x04000020 		0000 0010 1111 0101 1001 1000 0000 0100
0x04000024 		0000 0011 1011 1101 0111 0000 0010 0010

Raw Hex:
Address			Data
0x04000000 		0x20101230
0x04000004 		0x03504020
0x04000008 		0x00105140
0x0400000C 		0x13280001
0x04000010 		0x09000006
0x04000014 		0x1728fffe
0x04000018 		0xad870008
0x0400001C 		0x8fc60000
0x04000020 		0x02f59804
0x04000024 		0x03bd7022

----------------------------------------------------------------
Question 9:

Raw Hex:
Address			Data
0x00400000 		0x20142345
0x00400004 		0x029b5822
0x00400008 		0x11740002
0x0040000C 		0x00125c00
0x00400010 		0x08100005
0x00400014 		0x16350001
0x00400018 		0x02f59804

Raw Binary:
Address			Data						Type		Command
0x00400000 		0010 0000 0001 0100 0010 0011 0100 0101		I Type 		addi
0x00400004 		0000 0010 1001 1011 0101 1000 0010 0010		R Type 		sub
0x00400008 		0001 0001 0111 0100 0000 0000 0000 0010		J Type 		beq
0x0040000C 		0000 0000 0001 0010 0101 1101 0000 0000		R Type 		sll
0x00400010 		0000 1000 0001 0000 0000 0000 0000 0101		J Type 		j
0x00400014 		0001 0110 0011 0101 0000 0000 0000 0001		J Type 		bne
0x00400018 		0000 0010 1111 0101 1001 1000 0000 0100		R Type 		sllv


Breakdown:

R Types
Address			op		rs		rt		rd		shamt		funct		Actual command
0x00400004 		000000 		10100		11011		01011		00000		100010		sub $t3, $s4, $k1
0x0040000C 		000000 		00000		10010		01011		10000		000000		sll $t3, $s2, 16
0x00400018 		000000 		10111		10101		10011		00000		000100		sllv $s3, $s5, $s7

I Types
Address			op		rs		rt		imm				Actual command
0x00400000 		001000 		00000 		10100 		0010001101000101		addi $s4, $0, 9029
0x00400008 		000100 		01011 		10100 		0000000000000010		beq $t3, $s4, 2
0x00400014 		000101 		10001 		10101 		0000000000000001 		bne $s1, $s5, 1

J Type
Address			op		addr					Actual command
0x00400010 		000010 		00000100000000000000000101 		j 0x100005

J translation:
00 0001 0000 0000 0000 0000 0101 (26bit binary) -> 0000 0000 0100 0000 0000 0000 0001 0100 (32bit binary) -> 0x00400014 (32bit hex)


Markdown:
label1 = 0x00400014 / 2
label2 = 1


Full translation (MIPS Assembly code):
Address			Data
0x00400000 		addi $s4, $0, 9029
0x00400004 		sub $t3, $s4, $k1
0x00400008 		beq $t3, $s4, label1
0x0040000C 		sll $t3, $s2, 16
0x00400010 		j label1
0x00400014 		label1: bne $s1, $s5, label2
0x00400018 		sllv $s3, $s5, $s7
0x0040001C		label2:
